services:
  frontend:
    container_name: frontend
    image: node:18-alpine
    restart: always
    ports:
      - protocol: tcp
        published: ${FRONTEND_PORT:-80}
        target: 5173
    volumes:
      - type: bind
        source: ./frontend
        target: /app
    working_dir: /app
    command: [ 'npm', 'run', 'dev' ]
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    depends_on:
      frontend-npm:
        condition: service_completed_successfully
    networks:
      - frontend

  backend:
    container_name: backend
    image: node:18-alpine
    restart: always
    ports:
      - protocol: tcp
        published: ${BACKEND_PORT:-8080}
        target: 3000
    volumes:
      - type: bind
        source: ./backend
        target: /app
    working_dir: /app
    command: [ 'npm', 'start' ]
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    depends_on:
      backend-npm:
        condition: service_completed_successfully
    networks:
      - backend

  dynamodb:
    container_name: dynamodb
    image: amazon/dynamodb-local:latest
    restart: always
    ports:
      - protocol: tcp
        published: ${DYNAMODB_PORT:-8000}
        target: 8000
    volumes:
      - type: volume
        source: dynamodb
        target: /home/dynamodblocal/data
    command: [ '-jar', 'DynamoDBLocal.jar', '-dbPath', '/home/dynamodblocal/data', '-sharedDb' ]
    user: "${USER_ID:-0}:${GROUP_ID:-0}"
    networks:
      - backend

  dynamodb-admin:
    container_name: dynamodb-admin
    build:
      context: ./docker/dynamodb-admin
    restart: always
    ports:
      - protocol: tcp
        published: ${DYNAMODB_ADMIN_PORT:-8001}
        target: 8001
    networks:
      - backend
      - frontend
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb:8000
    command: [ 'dynamodb-admin' ]

  backend-npm:
    image: node:18-alpine
    container_name: backend-npm
    volumes:
      - type: bind
        source: ./backend
        target: /app
    working_dir: /app
    restart: "no"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    command: [ 'npm', 'i' ]

  frontend-npm:
    image: node:18-alpine
    container_name: frontend-npm
    volumes:
      - type: bind
        source: ./frontend
        target: /app
    working_dir: /app
    restart: "no"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    command: [ 'npm', 'i' ]

volumes:
  dynamodb: {}

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
